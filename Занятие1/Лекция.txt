Проблема:

Возьмем в пример приложение-навигатор для путешественников. Где каждая новая опция затрагивали один и тот же код, создавая конфликты, которые требовали дополнительного времени на иъ разрешение.


Решение:
Паттерн Стратегия предлагает определить семейство схожих алгоритмов, которые часто изменяются или расширяются, и вынести их в собственные классы, наз. стратегиями.


Шаги реализации:
1. Определите алгоритм, который подвержен частым изменениям. Также подойдёт алгоритм, имеющий несколько вариаций, которые выбираются во время выполеннеия программы.
2. Создайте интерфейс стратегий, описывающий этот алгоритм.Он должен быть общим для всех вариантов алгоритма.
3. Поместите вариации алгоритма в собственные классы, которые реализуют этот интерфейс.
4. В классе контекста создайте поле для хранения ссылка на текущий объект-стратегию, а также метод для ее изменения. Убедитесь в том,чьл контекст работает с этим объектом только черех общий интерефейс стратегий.
5. Клиенты контекста должны подавать в него соответствующий объект-стратегию, когда хотят, чтобы контекст вёл себя определенным образом.


Преимущества:
1. Горячая замета алгоритмов на лету
2. Изолирует код и данные алгоритмов от остальных классов.
3. Уход от наследования к делегированию.
4. Реализует принцип открытости/ закрытости

Недостатки:
1. Усложняет программу за счёт дополнительных классов.
2. Клиент должен знать, в чём состоит разница между стратегиями, чтобы выбрать подходящую


